- title: Generate a beautiful HTML page
  args:
    content: Content of the page
    purpose: What the page does
    file_path: Path into which the page will be saved
  instructions: |
    1. Search the internet for the latest BulmaCSS CDN version
    2. Generate a self-contained HTML page that combines the given content with BulmaCSS
    3. Write the HTML page to the given file path
    
    When generating the page, follow these rules:
    
    - Use the latest BulmaCSS version
    - Organize the content in a visually appealing way using Bulma components
    - Use FA icons and emojis to make the page more engaging
    - Make full use of Bulma CSS classes to style the page

- title: Gather information about project
  args:
    directory: Path to the directory
  instructions: |
    We want to know more about this project. The kind of info we are looking for includes:
     
    - Programming languages used
    - Usage of specific frameworks or libraries
    - Project structure and organization
    - Important files in the root dir and their relevance within the project
    
    Gather the information by doing the following:
    
    1. List the . directory
    2. Read files that could provide more information (README, build/config files, etc)
    3. From the data you collected, deduce the information we are looking for

  result: |
    A concise list of compact bullet points, each containing a piece of information about the project. Examples:
    - Project <name> is a <what is it> 
    - It solves <problem> for <persona> by <how it does it>.
    - Stack is Django/Python/Docker/Kubernetes
    - Dependencies and scripts in `pyproject.toml`
    - `src` directory contains the main project code
    - `docs` directory contains user documentation
    - Deployments and automation via Github actions
    - `tox.ini` for running tests with Pytest
    - ...

- title: Initialize the project
  args:
    tech_stack: Ultra-short description of the tech stack
    project_structure: ASCII representation of the project structure with short explanations
    build_and_run: How the project is built and run
    testing: How the project is tested
    additional_info: Anything else that is important
  instructions: |
    We want to write a file that gives an accurate, detailed overview of the project.
    The purpose of this file is to provide an entry point for finding information quickly.
    
    Template:
    ```markdown
    # <project name>
    Project <name> is a <what is it> that solves <problem> for <persona> by <how it does it>.
    
    ## Project Structure
    <ASCII representation of the project structure with short explanations>
    
    ## Domain model
    <concise bullet points about main concepts and how they relate to project structure>
    
    ## <section header>
    <3-4 concise bullet points>
    
    ...
    ```
    
    Use the template and write a new knowledge file for the project by doing the following:
    
    1. Break down the information into 4-6 sections
    2. Write each section with a 1-2 word header and 3-4 concise bullet points
    3. Use ASCII art to represent the project structure
    4. Write the file into `.pilot-hints.md` in the project root directory
    
- title: Find the answer to a question about the code
  args:
    question: A question about the code base
  instructions: |
    I have a question about the code base, please answer it in the following way:
    
    1. Do a code search to find files relevant to the question
    2. Read relevant files
    3. Use that information to answer the question:
  result: |
    A concise, but detailed response to the question. Include Markdown links to files and code snippets as examples.

- title: Refactor part of the code
  args:
    code_to_refactor: Which files/classes/modules need refactoring
    why_refactor: Why does the code need refactoring?
    expected_result: What is the expected end result?
  instructions: |
    I want you to refactor part of the code:
    
    1. Find and read the files containing the code to refactor and read them
    2. Change the code to achieve the expected result
    3. Update the existing files and if required, create new files
    
- title: Generate a beautiful README file
  args:
    project_name: Name of the project
    project_description: Description of the project
    project_badges: List of badges to include
    project_structure: Concise, detailed overview of project structure
    project_tech_stack: List of technologies used
    project_installation: How to install the project
    project_usage: How to use the project
    project_contributing: How to contribute to the project
  instructions: |
    I want you to generate a beautiful README file for the project:
    
    1. Use the template below to structure the README file
    2. Fill in the template with the provided information using the guidelines below
    
    Guidelines:
    - Highlight important key phrases in bold so I can get the gist when skim-reading
    - Use concise, clear language to explain each section
    - Add an emoji to the beginning of each header to make it visually appealing
    - Throughout the document, use emojis to make it more engaging / easier to read
    
    Template:
    ```markdown
    # <project name>
    <badges>
    <project description>
    
    ## Project Structure
    <ASCII representation of the project structure>
    
    ## Tech Stack
    <tech stack>
    
    ## Installation
    <installation>
    
    ## Usage
    <usage>
    
    ## Contributing
    <contributing>
    ```
  result: |
    Confirmation that the README.md file was generated and saved successfully.
    Insist that no further action is required.